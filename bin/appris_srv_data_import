#!/bin/bash

# -----------------------------------------------------------------------------
# Load environmental variables
# If you do not trust the path, configure below:
SYSTEM=`uname -s`
if [ "$SYSTEM" = Darwin ]
then
	source /etc/bashrc
	source /etc/profile
	source ${HOME}/.bash_profile
elif [ "$SYSTEM" = Linux ]
then
	source /etc/profile
	source /etc/bash.bashrc
	source ${HOME}/.bashrc
fi

# -----------------------------------------------------------------------------
# Global parameters
SRV_NAME="appris@appris"
SRV_PUB_RELEASE_DIR="/local/appris/pub/releases"
SRV_DB_HOST="localhost"
SRV_DB_USER="appris"
SRV_DB_PWD="appris.appris"

APPRIS_DATA_DIR="/home/jmrodriguez/projects/APPRIS/data"

# Input parameters
RELEASE=""
RELEASE_DATAFILE=""

# -----------------------------------------------------------------------------
# Usage

USAGE="
\n
 APPRIS's binary package.\n
\n
 Name:\n
\t appris_srv_data_import\n
\n
 Description:\n
\t Make the migration of datafiles and databases to server\n
\n
 Required arguments:\n
\t -r [-rel] {string}\n
\t\t Release version. Eg, 2016_03.v15\n
\n
\t -d [-dat] {file}\n
\t\t Data file of given release. Eg, release.dat\n
\n
\t -h [-help]\n
\n
\n
 Author: Jose Manuel Rodriguez Carrasco -jmrodriguez@cnio.es- (INB-GN2,CNIO)\n
\n
"
# -----------------------------------------------------------------------------
# Get input parameters

while expr "//$1" : //- >/dev/null
do
	case "$1" in
		-r | -rel )
			RELEASE=$2
			shift
			;;
		-d | -dat )
			RELEASE_DATAFILE=$2
			shift
			;;
		-h | -help )
			echo -e $USAGE		
			exit
			;;
		* )
			echo Unknown option: "$1"
			echo -e $USAGE
			exit 1
			;;
	esac
	shift
done

if [ "${RELEASE}" == "" ]; then
	echo You must specify the release
	echo -e $USAGE
	exit 1
fi

if [[ "${RELEASE_DATAFILE}" == "" || ! (-e "${RELEASE_DATAFILE}") ]]; then
	echo You must specify the data file of release
	echo -e $USAGE
	exit 1
fi

# -----------------------------------------------------------------------------
# Local methods

run() {
	echo $1
	eval $1
}
load_release_data() {
	dat="$1"
	file="$2"
	rel="$3"
	flag=0
	out=""
	while IFS='' read -r line || [[ -n "$line" ]]; do
		if [[ "$line" =~ ^==APPRIS_RELEASE:${dat}:${rel} ]]; then
			flag=1
		elif [[ "$line" =~ ^==APPRIS_RELEASE:.* ]]; then
   			flag=0
    	fi
    	if [[ "$flag" == 1 ]]; then
    		if [[ ! "$line" =~ ^==APPRIS_RELEASE:.* ]]; then
    			out+="$line\n"
    		fi
    	fi
	done < "$file"
	echo -e $out
}

# -----------------------------------------------------------------------------

##
SRV_RELEASE_DIR="${SRV_PUB_RELEASE_DIR}/${RELEASE}"
SRV_REL_DATADIR="${SRV_RELEASE_DIR}/datafiles"

## 
echo "# extract release data:"
SRV_RELEASE_DATA=$(load_release_data "DATAFILES" "${RELEASE_DATAFILE}" "${RELEASE}")
echo "${SRV_RELEASE_DATA}"
echo ""

##
echo "# extract release notes:"
SRV_RELEASE_RELNOTES=$(load_release_data "RELNOTES" "${RELEASE_DATAFILE}" "${RELEASE}")
echo "${SRV_RELEASE_RELNOTES}"
echo ""


##
echo "# create link from assembly version to data version:"
TARFILES=""
while read -r SRV_DATA; do
	SDATA=($SRV_DATA)
	SPECIES=${SDATA[0]}
	REL=${SDATA[1]}
	ASS=${SDATA[2]}
	DB=${SDATA[3]}
	RELDIR="${SPECIES}/${REL}"
	ASSDIR="${SPECIES}/${ASS}"

	if [[ "${ASS}" != "-" ]]; then
		run "cd ${APPRIS_DATA_DIR} && rm ${ASSDIR} ; ln -s ${REL} ${ASSDIR}"
		TARFILES+="${ASSDIR} "
	fi
	TARFILES+="${RELDIR} "
done <<< "$SRV_RELEASE_DATA"
echo ""

##
echo "# upload datafiles to server:"
if [[ "${TARFILES}" == "" ]]; then
	echo Empty list of versions
	exit 1
fi
run "cd ${APPRIS_DATA_DIR} && tar -cf - ${TARFILES} | ssh ${SRV_NAME} 'mkdir -p ${SRV_REL_DATADIR}; cd ${SRV_REL_DATADIR}/; tar -xf -'"
echo ""

##
echo "# import databases into server:"
while read -r SRV_DATA; do
	SDATA=($SRV_DATA)
	SPECIES=${SDATA[0]}
	REL=${SDATA[1]}
	ASS=${SDATA[2]}
	DB=${SDATA[3]}
	RELDIR="${SPECIES}/${REL}"
	ASSDIR="${SPECIES}/${ASS}"
	RELDATAFILE="${SRV_REL_DATADIR}/${RELDIR}/appris_db.dump.gz"
	CMD_IMPORT_DBS+="appris_db_create -d ${DB} -h ${SRV_DB_HOST} -u root && "
	CMD_IMPORT_DBS+="appris_db_import -d ${DB} -h ${SRV_DB_HOST} -u ${SRV_DB_USER} -p ${SRV_DB_PWD} -i ${RELDATAFILE} && "
done <<< "$SRV_RELEASE_DATA"
if [[ "${CMD_IMPORT_DBS}" == "" ]]; then
	echo Empty list of databases
	exit 1
fi
CMD_IMPORT_DBS=$(echo "${CMD_IMPORT_DBS}" | sed s'/&& $//g')
run "ssh ${SRV_NAME} '${CMD_IMPORT_DBS}'"
echo ""

##
echo "# copy release datafile into server:"
run "scp ${RELEASE_DATAFILE} ${SRV_NAME}:${SRV_PUB_RELEASE_DIR}"
echo ""

##
#echo "# create release note from given release:"
#run "echo '${SRV_RELEASE_RELNOTES}' | ssh ${SRV_NAME} 'cat > ${SRV_RELEASE_DIR}/relnotes.txt' "
#run "echo -e \"${SRV_RELEASE_RELNOTES}\" > /tmp/kk"
#echo ""

